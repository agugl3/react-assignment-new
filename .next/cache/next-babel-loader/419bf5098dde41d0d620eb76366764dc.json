{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(fetchList),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(actionWatcher),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { put, takeLatest, all } from 'redux-saga/effects';\n\nfunction fetchList(action) {\n  var payload, params, data;\n  return _regeneratorRuntime.wrap(function fetchList$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          payload = {};\n\n          if (action && action.payload) {\n            payload = action.payload;\n          }\n\n          params = Object.keys(payload).filter(function (key) {\n            return payload[key] ? true : false;\n          }).map(function (key) {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(payload[key]);\n          }).join('&');\n          _context.next = 5;\n          return fetch('https://rickandmortyapi.com/api/character/?' + params, {\n            method: 'GET'\n          }).then(function (response) {\n            return response.json();\n          });\n\n        case 5:\n          data = _context.sent;\n          _context.next = 8;\n          return put({\n            type: \"LIST_RECEIVED\",\n            jsonObj: data || [{\n              error: json.message\n            }]\n          });\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction actionWatcher() {\n  return _regeneratorRuntime.wrap(function actionWatcher$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest('GET_LIST', fetchList);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([actionWatcher()]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/guglani lalit/Documents/react-assignment/components/organisms/Game/Game.saga.js"],"names":["fetchList","actionWatcher","rootSaga","put","takeLatest","all","action","payload","params","Object","keys","filter","key","map","encodeURIComponent","join","fetch","method","then","response","json","data","type","jsonObj","error","message"],"mappings":";;oDAEUA,S;qDAsBAC,a;qDAKeC,Q;;AA7BzB,SAASC,GAAT,EAAcC,UAAd,EAA0BC,GAA1B,QAAqC,oBAArC;;AAEA,SAAUL,SAAV,CAAoBM,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AACQC,UAAAA,OADR,GACkB,EADlB;;AAEI,cAAID,MAAM,IAAIA,MAAM,CAACC,OAArB,EAA8B;AAC1BA,YAAAA,OAAO,GAAGD,MAAM,CAACC,OAAjB;AACH;;AAEGC,UAAAA,MANR,GAMiBC,MAAM,CAACC,IAAP,CAAYH,OAAZ,EACRI,MADQ,CACD,UAAUC,GAAV,EAAe;AACnB,mBAAOL,OAAO,CAACK,GAAD,CAAP,GAAe,IAAf,GAAsB,KAA7B;AACH,WAHQ,EAIRC,GAJQ,CAIJ,UAAUD,GAAV,EAAe;AAChB,mBAAOE,kBAAkB,CAACF,GAAD,CAAlB,GAA0B,GAA1B,GAAgCE,kBAAkB,CAACP,OAAO,CAACK,GAAD,CAAR,CAAzD;AACH,WANQ,EAORG,IAPQ,CAOH,GAPG,CANjB;AAAA;AAgBiB,iBAAMC,KAAK,CAAC,gDAAgDR,MAAjD,EAAyD;AAAES,YAAAA,MAAM,EAAE;AAAV,WAAzD,CAAL,CACdC,IADc,CACT,UAAAC,QAAQ;AAAA,mBAAIA,QAAQ,CAACC,IAAT,EAAJ;AAAA,WADC,CAAN;;AAhBjB;AAgBUC,UAAAA,IAhBV;AAAA;AAmBI,iBAAMlB,GAAG,CAAC;AAAEmB,YAAAA,IAAI,EAAE,eAAR;AAAyBC,YAAAA,OAAO,EAAEF,IAAI,IAAI,CAAC;AAAEG,cAAAA,KAAK,EAAEJ,IAAI,CAACK;AAAd,aAAD;AAA1C,WAAD,CAAT;;AAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAsBA,SAAUxB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMG,UAAU,CAAC,UAAD,EAAaJ,SAAb,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMG,GAAG,CAAC,CACNJ,aAAa,EADP,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { put, takeLatest, all } from 'redux-saga/effects';\r\n\r\nfunction* fetchList(action) {\r\n    let payload = {};\r\n    if (action && action.payload) {\r\n        payload = action.payload;\r\n    }\r\n\r\n    var params = Object.keys(payload)\r\n        .filter(function (key) {\r\n            return payload[key] ? true : false\r\n        })\r\n        .map(function (key) {\r\n            return encodeURIComponent(key) + '=' + encodeURIComponent(payload[key])\r\n        })\r\n        .join('&');\r\n\r\n\r\n    const data = yield fetch('https://rickandmortyapi.com/api/character/?' + params, { method: 'GET' })\r\n        .then(response => response.json());\r\n\r\n    yield put({ type: \"LIST_RECEIVED\", jsonObj: data || [{ error: json.message }] });\r\n}\r\n\r\nfunction* actionWatcher() {\r\n    yield takeLatest('GET_LIST', fetchList)\r\n}\r\n\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        actionWatcher(),\r\n    ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}