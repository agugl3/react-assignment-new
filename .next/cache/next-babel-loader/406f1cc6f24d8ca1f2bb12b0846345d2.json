{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\guglani lalit\\\\Documents\\\\react-assignment\\\\components\\\\organisms\\\\Game\\\\Game.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport ResultSet from '../containers/ResultSet';\nimport { connect } from 'react-redux';\nimport './Grid.css';\nimport './App.css';\nimport Heading from './Heading';\nimport FilterBox from './FilterBox';\nimport SelectedFilter from './SelectedFilter';\nimport SearchBox from './SearchBox';\nimport SortBox from './SortBox';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFilterClick = this.handleFilterClick.bind(this);\n    this.removeFilter = this.removeFilter.bind(this);\n    this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\n    this.handleSort = this.handleSort.bind(this);\n    const filterobj = [{\n      heading: \"Species\",\n      filterobj: [{\n        label: \"Human\",\n        id: \"human\",\n        grpclass: \"species\"\n      }, {\n        label: \"Mytholog\",\n        id: \"mytholog\",\n        grpclass: \"species\"\n      }, {\n        label: \"Humanoid\",\n        id: \"humanoid\",\n        grpclass: \"species\"\n      }]\n    }, {\n      heading: \"Gender\",\n      filterobj: [{\n        label: \"Male\",\n        id: \"male\",\n        grpclass: \"gender\"\n      }, {\n        label: \"Female\",\n        id: \"female\",\n        grpclass: \"gender\"\n      }]\n    }, {\n      heading: \"Status\",\n      filterobj: [{\n        label: \"Alive\",\n        id: \"alive\",\n        grpclass: \"status\"\n      }, {\n        label: \"Dead\",\n        id: \"dead\",\n        grpclass: \"status\"\n      }, {\n        label: \"Unknown\",\n        id: \"unknown\",\n        grpclass: \"status\"\n      }]\n    }]; // Don't call this.setState() here!\n\n    this.state = {\n      filterobj: filterobj,\n      filters: {\n        gender: \"\",\n        status: \"\",\n        species: \"\"\n      },\n      sortValue: \"Ascending\"\n    };\n  }\n\n  componentWillMount() {\n    const {\n      getList\n    } = this.props;\n    getList();\n  }\n\n  handleFilterClick(event, id, filterHeading, grpclass) {\n    const isChecked = event ? event.target.checked : false;\n    const {\n      getList\n    } = this.props;\n    const {\n      filters\n    } = this.state;\n    const category = filterHeading.toLowerCase();\n    let newValue = \"\";\n\n    if (isChecked) {\n      newValue = !!filters[category] ? filters[category] + '|' + id : id;\n    } else {\n      let arr = filters[category].split(\"|\");\n      arr = arr.filter(item => item !== id);\n      newValue = arr.join(\"|\");\n    }\n\n    this.setState({\n      filters: _objectSpread(_objectSpread({}, filters), {}, {\n        [category]: newValue\n      })\n    }, () => {\n      getList(this.state.filters);\n    });\n  }\n\n  handleSort(event) {\n    const sortValue = event.target.value;\n    this.setState({\n      sortValue: sortValue\n    });\n  }\n\n  removeFilter(id, category) {\n    this.handleFilterClick(false, id, category);\n  }\n\n  handleSearchSubmit(inputValue) {\n    const {\n      getList\n    } = this.props;\n    getList({\n      name: inputValue\n    });\n  }\n\n  render() {\n    const {\n      list,\n      getList\n    } = this.props;\n    const {\n      filterobj,\n      filters,\n      sortValue\n    } = this.state;\n    return __jsx(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", {\n      className: \"col-md-3 col-12-sm left-col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 21\n      }\n    }, __jsx(Heading, {\n      name: \"Filters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 25\n      }\n    }), filterobj.map(({\n      heading,\n      filterobj\n    }) => __jsx(FilterBox, {\n      filterHeading: heading,\n      filterobj: filterobj,\n      handleFilterClick: this.handleFilterClick,\n      filters: filters,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 29\n      }\n    }))), __jsx(\"div\", {\n      className: \"col-md-9 col-12-sm right-col\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 21\n      }\n    }, __jsx(Heading, {\n      name: \"Selected Filters\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }), __jsx(SelectedFilter, {\n      filters: filters,\n      removeFilter: this.removeFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 25\n      }\n    }), __jsx(\"div\", {\n      className: \"row middle-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 25\n      }\n    }, __jsx(SearchBox, {\n      handleSearchSubmit: this.handleSearchSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 29\n      }\n    }), __jsx(SortBox, {\n      handleSort: this.handleSort,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 29\n      }\n    })), __jsx(\"div\", {\n      className: \"row box-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 25\n      }\n    }, __jsx(ResultSet, {\n      list: list,\n      sortValue: sortValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 29\n      }\n    })))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    list: state.listingData\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getList: payload => dispatch({\n      type: \"GET_LIST\",\n      payload\n    })\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);","map":{"version":3,"sources":["C:/Users/guglani lalit/Documents/react-assignment/components/organisms/Game/Game.js"],"names":["React","ResultSet","connect","Heading","FilterBox","SelectedFilter","SearchBox","SortBox","Game","Component","constructor","props","handleFilterClick","bind","removeFilter","handleSearchSubmit","handleSort","filterobj","heading","label","id","grpclass","state","filters","gender","status","species","sortValue","componentWillMount","getList","event","filterHeading","isChecked","target","checked","category","toLowerCase","newValue","arr","split","filter","item","join","setState","value","inputValue","name","render","list","map","mapStateToProps","listingData","mapDispatchToProps","dispatch","payload","type"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport ResultSet from '../containers/ResultSet';\r\nimport { connect } from 'react-redux';\r\nimport './Grid.css';\r\nimport './App.css';\r\nimport Heading from './Heading';\r\nimport FilterBox from './FilterBox';\r\nimport SelectedFilter from './SelectedFilter';\r\nimport SearchBox from './SearchBox';\r\nimport SortBox from './SortBox';\r\n\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleFilterClick = this.handleFilterClick.bind(this);\r\n        this.removeFilter = this.removeFilter.bind(this);\r\n        this.handleSearchSubmit = this.handleSearchSubmit.bind(this);\r\n        this.handleSort = this.handleSort.bind(this);\r\n        const filterobj = [\r\n            {\r\n                heading: \"Species\",\r\n                filterobj: [{\r\n                    label: \"Human\",\r\n                    id: \"human\",\r\n                    grpclass: \"species\",\r\n                }, {\r\n                    label: \"Mytholog\",\r\n                    id: \"mytholog\",\r\n                    grpclass: \"species\",\r\n                }, {\r\n                    label: \"Humanoid\",\r\n                    id: \"humanoid\",\r\n                    grpclass: \"species\",\r\n                }]\r\n            },\r\n            {\r\n                heading: \"Gender\",\r\n                filterobj: [{\r\n                    label: \"Male\",\r\n                    id: \"male\",\r\n                    grpclass: \"gender\",\r\n                }, {\r\n                    label: \"Female\",\r\n                    id: \"female\",\r\n                    grpclass: \"gender\",\r\n                }]\r\n            },\r\n            {\r\n                heading: \"Status\",\r\n                filterobj: [{\r\n                    label: \"Alive\",\r\n                    id: \"alive\",\r\n                    grpclass: \"status\",\r\n                }, {\r\n                    label: \"Dead\",\r\n                    id: \"dead\",\r\n                    grpclass: \"status\",\r\n                }, {\r\n                    label: \"Unknown\",\r\n                    id: \"unknown\",\r\n                    grpclass: \"status\",\r\n                }\r\n                ]\r\n            }\r\n        ];\r\n\r\n        // Don't call this.setState() here!\r\n        this.state = {\r\n            filterobj: filterobj,\r\n            filters: {\r\n                gender: \"\",\r\n                status: \"\",\r\n                species: \"\"\r\n            },\r\n            sortValue: \"Ascending\"\r\n        };\r\n    }\r\n\r\n    componentWillMount() {\r\n        const { getList } = this.props;\r\n        getList();\r\n    }\r\n\r\n    handleFilterClick(event, id, filterHeading, grpclass) {\r\n        const isChecked = event ? event.target.checked : false;\r\n        const { getList } = this.props;\r\n        const { filters } = this.state;\r\n        const category = filterHeading.toLowerCase();\r\n        let newValue = \"\";\r\n        if (isChecked) {\r\n            newValue = !!filters[category] ? filters[category] + '|' + id : id;\r\n        } else {\r\n            let arr = filters[category].split(\"|\");\r\n            arr = arr.filter(item => item !== id)\r\n            newValue = arr.join(\"|\");\r\n        }\r\n\r\n        this.setState({\r\n            filters: {\r\n                ...filters,\r\n                [category]: newValue\r\n            }\r\n        }, () => {\r\n            getList(this.state.filters);\r\n        });\r\n    }\r\n    handleSort(event) {\r\n        const sortValue = event.target.value;\r\n        this.setState({\r\n            sortValue: sortValue\r\n        })\r\n    }\r\n    removeFilter(id, category) {\r\n        this.handleFilterClick(false, id, category)\r\n\r\n    }\r\n    handleSearchSubmit(inputValue) {\r\n        const { getList } = this.props;\r\n        getList({ name: inputValue });\r\n    }\r\n\r\n    render() {\r\n        const { list, getList } = this.props;\r\n        const { filterobj, filters, sortValue } = this.state;\r\n        return (\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-3 col-12-sm left-col\">\r\n                        <Heading name=\"Filters\" />\r\n                        {filterobj.map(({ heading, filterobj }) => (\r\n                            <FilterBox filterHeading={heading} filterobj={filterobj} handleFilterClick={this.handleFilterClick} filters={filters} />\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"col-md-9 col-12-sm right-col\">\r\n                        <Heading name=\"Selected Filters\" />\r\n                        <SelectedFilter filters={filters} removeFilter={this.removeFilter} />\r\n\r\n                        <div className=\"row middle-row\">\r\n                            <SearchBox handleSearchSubmit={this.handleSearchSubmit} />\r\n                            <SortBox handleSort={this.handleSort} />\r\n                        </div>\r\n                        <div className=\"row box-container\">\r\n                            <ResultSet list={list} sortValue={sortValue} />\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        list: state.listingData,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        getList: (payload) => dispatch({ type: \"GET_LIST\", payload })\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\r\n"]},"metadata":{},"sourceType":"module"}